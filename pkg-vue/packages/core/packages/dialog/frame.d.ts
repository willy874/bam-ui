import type { FrameConstructor, FramePosition, PagePosition, FrameHookProperty } from './types';
import { DragEventType } from '../../enum';
import Dialog from './dialog';
export default class Frame<View = any> {
    id: symbol;
    dialogId: symbol;
    view: View;
    props: object;
    isOverLimit: boolean;
    isDraggable: boolean;
    isResizable: boolean;
    isFull: boolean;
    position: FramePosition;
    element: Element | null;
    top: string;
    left: string;
    width: string | number;
    height: string | number;
    mouseOffsetX: number;
    mouseOffsetY: number;
    close: Function | null;
    onError: Function;
    hook: FrameHookProperty;
    resizeObserver: ResizeObserver | null;
    isDragged: boolean;
    isResized: boolean;
    dialogPadding: number;
    constructor(args: FrameConstructor<View>);
    setFrameElement<C = {}>(value: Element | C): void;
    setDraggable(bool: boolean): void;
    setResizable(bool: boolean): void;
    setOverLimit(bool: boolean): void;
    setFull(bool: boolean): void;
    setPosition(position: FramePosition): void;
    protected _setPosition(position: FramePosition, dialog: Dialog): void;
    setBoxSize(): void;
    on(type: string, callback?: Function): boolean;
    off(type: string, callback?: Function): boolean;
    _onClose(dialog: Dialog): Promise<Frame<any>>;
    onClose(): Promise<Frame<any>>;
    onMount(...args: any[]): void;
    onUnmount(...args: any[]): void;
    onUpdate(...args: any[]): void;
    onResize(...args: any[]): void;
    onDragstart(...args: any[]): void;
    onTouchstart(...args: any[]): void;
    onDragmove(pos: PagePosition): void;
    onDragresize(pos: PagePosition, type: DragEventType): void;
    onDragover(...args: any[]): void;
    onTouchmove(...args: any[]): void;
    onDragend(...args: any[]): void;
    onTouchend(...args: any[]): void;
    createVNode(): any;
}
