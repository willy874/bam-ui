import type { DialogConstructor, OpenFrameOptions } from './types';
import { DragEventType } from '../../enum';
import Frame from './frame';
declare type GetFrameParam = Frame | number | symbol;
export default class Dialog {
    readonly id: symbol;
    readonly frames: Array<Frame>;
    readonly isBackgroundMask: boolean;
    readonly backgroundMask: string;
    focusFrame: Frame | null;
    eventType: DragEventType;
    element: Element | null;
    touches: Touch[];
    prevTouches: Touch[];
    private hook;
    constructor(args: DialogConstructor);
    on(type: string, callback?: Function): boolean;
    off(type: string, callback: Function): boolean;
    onMount(...args: any[]): void;
    onUnmount(...args: any[]): void;
    onUpdate(...args: any[]): void;
    onResize(e: Event): void;
    onBgclick(e: MouseEvent): void;
    onDragstart(event: DragEvent, id: symbol, type: DragEventType): void;
    onTouchstart(event: TouchEvent, id: symbol, type: DragEventType): void;
    onDragover(event: DragEvent): void;
    onTouchmove(event: TouchEvent): void;
    onDragend(event: DragEvent): void;
    onTouchend(event: TouchEvent): void;
    setRootElement<C = {}>(value: Element | C): void;
    setFrameItemElement(index: number): (value: Element) => void;
    sortToRight(id: symbol): void;
    openFrame<V>(view: (() => V) | Frame<V>, options?: OpenFrameOptions): Promise<Frame<V>>;
    private callbackCloseFrame;
    closeFrame(arg?: unknown, callback?: Function): Promise<Frame<any>[]>;
    _getFrame(arg?: GetFrameParam): Frame<any> | undefined;
    getFrame(arg?: GetFrameParam): Frame<any> | undefined;
}
export {};
