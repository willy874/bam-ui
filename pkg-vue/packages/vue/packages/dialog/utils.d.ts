import type { DialogOptions, FrameOptions } from '../../../core/packages';
import { UnwrapNestedRefs } from 'vue';
import VueDialog from './dialog-class';
import VueFrame from './frame-class';
export declare function createDialog(options?: DialogOptions): VueDialog;
export declare function setDefaultDialog(dialog: VueDialog): {
    tag: string;
    readonly frames: {
        tag: string;
        setPosition: (position: import('../../../core/packages').FramePosition) => void;
        onClose: () => Promise<import('../../../core/packages').Frame<any>>;
        createVNode: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        id: symbol;
        dialogId: symbol;
        view: any;
        props: object;
        isOverLimit: boolean;
        isDraggable: boolean;
        isResizable: boolean;
        isFull: boolean;
        position: "auto" | "center" | {
            top: string | number;
            left: string | number;
        };
        element: Element | null;
        top: string;
        left: string;
        width: string | number;
        height: string | number;
        mouseOffsetX: number;
        mouseOffsetY: number;
        close: Function | null;
        onError: Function;
        hook: {
            mount: Function[];
            unmount: Function[];
            update: Function[];
            bgclick: Function[];
            dragstart: Function[];
            dragover: Function[];
            dragend: Function[];
            touchstart: Function[];
            touchmove: Function[];
            touchend: Function[];
        };
        resizeObserver: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions | undefined) => void;
            unobserve: (target: Element) => void;
        } | null;
        isDragged: boolean;
        isResized: boolean;
        dialogPadding: number;
        setFrameElement: <C = {}>(value: Element | C) => void;
        setDraggable: (bool: boolean) => void;
        setResizable: (bool: boolean) => void;
        setOverLimit: (bool: boolean) => void;
        setFull: (bool: boolean) => void;
        setBoxSize: () => void;
        on: (type: string, callback?: Function | undefined) => boolean;
        off: (type: string, callback?: Function | undefined) => boolean;
        _onClose: (dialog: import('../../../core/packages').Dialog) => Promise<import('../../../core/packages').Frame<any>>;
        onMount: (...args: any[]) => void;
        onUnmount: (...args: any[]) => void;
        onUpdate: (...args: any[]) => void;
        onResize: (...args: any[]) => void;
        onDragstart: (...args: any[]) => void;
        onTouchstart: (...args: any[]) => void;
        onDragmove: (pos: import('../../../core/packages').PagePosition) => void;
        onDragresize: (pos: import('../../../core/packages').PagePosition, type: import("../../../core/enum").DragEventType) => void;
        onDragover: (...args: any[]) => void;
        onTouchmove: (...args: any[]) => void;
        onDragend: (...args: any[]) => void;
        onTouchend: (...args: any[]) => void;
    }[];
    focusFrame: {
        tag: string;
        setPosition: (position: import('../../../core/packages').FramePosition) => void;
        onClose: () => Promise<import('../../../core/packages').Frame<any>>;
        createVNode: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        id: symbol;
        dialogId: symbol;
        view: any;
        props: object;
        isOverLimit: boolean;
        isDraggable: boolean;
        isResizable: boolean;
        isFull: boolean;
        position: "auto" | "center" | {
            top: string | number;
            left: string | number;
        };
        element: Element | null;
        top: string;
        left: string;
        width: string | number;
        height: string | number;
        mouseOffsetX: number;
        mouseOffsetY: number;
        close: Function | null;
        onError: Function;
        hook: {
            mount: Function[];
            unmount: Function[];
            update: Function[];
            bgclick: Function[];
            dragstart: Function[];
            dragover: Function[];
            dragend: Function[];
            touchstart: Function[];
            touchmove: Function[];
            touchend: Function[];
        };
        resizeObserver: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions | undefined) => void;
            unobserve: (target: Element) => void;
        } | null;
        isDragged: boolean;
        isResized: boolean;
        dialogPadding: number;
        setFrameElement: <C = {}>(value: Element | C) => void;
        setDraggable: (bool: boolean) => void;
        setResizable: (bool: boolean) => void;
        setOverLimit: (bool: boolean) => void;
        setFull: (bool: boolean) => void;
        setBoxSize: () => void;
        on: (type: string, callback?: Function | undefined) => boolean;
        off: (type: string, callback?: Function | undefined) => boolean;
        _onClose: (dialog: import('../../../core/packages').Dialog) => Promise<import('../../../core/packages').Frame<any>>;
        onMount: (...args: any[]) => void;
        onUnmount: (...args: any[]) => void;
        onUpdate: (...args: any[]) => void;
        onResize: (...args: any[]) => void;
        onDragstart: (...args: any[]) => void;
        onTouchstart: (...args: any[]) => void;
        onDragmove: (pos: import('../../../core/packages').PagePosition) => void;
        onDragresize: (pos: import('../../../core/packages').PagePosition, type: import("../../../core/enum").DragEventType) => void;
        onDragover: (...args: any[]) => void;
        onTouchmove: (...args: any[]) => void;
        onDragend: (...args: any[]) => void;
        onTouchend: (...args: any[]) => void;
    } | null;
    getFrame: (arg?: (number | symbol | VueFrame<any>) | undefined) => import('../../../core/packages').Frame<any> | undefined;
    openFrame: <V = any>(view: VueFrame<any> | (() => V), options?: import('../../../core/packages').OpenFrameOptions | undefined) => Promise<VueFrame<any>>;
    readonly id: symbol;
    readonly isBackgroundMask: boolean;
    readonly backgroundMask: string;
    eventType: import("../../../core/enum").DragEventType;
    element: Element | null;
    touches: {
        readonly clientX: number;
        readonly clientY: number;
        readonly force: number;
        readonly identifier: number;
        readonly pageX: number;
        readonly pageY: number;
        readonly radiusX: number;
        readonly radiusY: number;
        readonly rotationAngle: number;
        readonly screenX: number;
        readonly screenY: number;
        readonly target: {
            addEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
            dispatchEvent: (event: Event) => boolean;
            removeEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
        };
    }[];
    prevTouches: {
        readonly clientX: number;
        readonly clientY: number;
        readonly force: number;
        readonly identifier: number;
        readonly pageX: number;
        readonly pageY: number;
        readonly radiusX: number;
        readonly radiusY: number;
        readonly rotationAngle: number;
        readonly screenX: number;
        readonly screenY: number;
        readonly target: {
            addEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
            dispatchEvent: (event: Event) => boolean;
            removeEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
        };
    }[];
    on: (type: string, callback?: Function | undefined) => boolean;
    off: (type: string, callback: Function) => boolean;
    onMount: (...args: any[]) => void;
    onUnmount: (...args: any[]) => void;
    onUpdate: (...args: any[]) => void;
    onResize: (e: Event) => void;
    onBgclick: (e: MouseEvent) => void;
    onDragstart: (event: DragEvent, id: symbol, type: import("../../../core/enum").DragEventType) => void;
    onTouchstart: (event: TouchEvent, id: symbol, type: import("../../../core/enum").DragEventType) => void;
    onDragover: (event: DragEvent) => void;
    onTouchmove: (event: TouchEvent) => void;
    onDragend: (event: DragEvent) => void;
    onTouchend: (event: TouchEvent) => void;
    setRootElement: <C_1 = {}>(value: Element | C_1) => void;
    setFrameItemElement: (index: number) => (value: Element) => void;
    sortToRight: (id: symbol) => void;
    closeFrame: (arg?: unknown, callback?: Function | undefined) => Promise<import('../../../core/packages').Frame<any>[]>;
    _getFrame: (arg?: (number | symbol | import('../../../core/packages').Frame<any>) | undefined) => import('../../../core/packages').Frame<any> | undefined;
};
export declare function useDialog(id?: symbol): UnwrapNestedRefs<VueDialog>;
export declare function useFrame<V>(id: symbol): VueFrame<V>;
export declare function createFrame<V>(options: FrameOptions<V>): VueFrame<V>;
export declare function isFrame<V>(f: unknown): f is VueFrame<V>;
